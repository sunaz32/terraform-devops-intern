name: Terraform CI/CD

on:
  workflow_call:
    inputs:
      image_url:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      env_name:
        required: true
        type: string
      destroy:
        required: false
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      image_url:
        description: 'Docker image URL'
        required: true
        type: string
      target_branch:
        description: 'Target Git branch'
        required: true
        type: string
      env_name:
        description: 'Environment name (dev, stage, prod)'
        required: true
        type: string
      destroy:
        description: 'Set to true to destroy resources'
        required: false
        type: boolean
        default: false

jobs:
  terraform:
    name: Terraform ${{ inputs.destroy && 'Destroy' || 'Deploy' }} - ${{ inputs.env_name }}
    runs-on: ubuntu-latest

    env:
      TF_VAR_image_url: ${{ inputs.image_url }}
      AWS_REGION: ap-south-1
      ENV_FOLDER: ${{ inputs.env_name }}-environment

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::851725602228:role/Githubterraform-newrole
          role-session-name: terraform-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ inputs.env_name }}/terraform.tfstate"
        working-directory: ${{ env.ENV_FOLDER }}

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.ENV_FOLDER }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.ENV_FOLDER }}

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: ${{ env.ENV_FOLDER }}

      - name: Terraform Apply
        if: inputs.destroy == false
        run: terraform apply -auto-approve -var-file="terraform.tfvars"
        working-directory: ${{ env.ENV_FOLDER }}

      - name: Terraform Destroy
        if: inputs.destroy == true
        run: terraform destroy -auto-approve -var-file="terraform.tfvars"
        working-directory: ${{ env.ENV_FOLDER }}
