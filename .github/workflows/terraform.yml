name: Terraform Multi-Environment CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "dev-environment/**"
      - "stage-environment/**"
      - "prod-environment/**"
      - "modules/**"
      - ".github/workflows/**"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # Detect Environment based on changed folder
      - name: Detect Environment
        id: detect
        run: |
          if [[ $(git rev-parse --verify HEAD~1 2>/dev/null) ]]; then
            DIFF_FILES=$(git diff --name-only HEAD~1)
          else
            DIFF_FILES=$(git ls-files)
          fi

          echo "Changed files:"
          echo "$DIFF_FILES"

          TOP_FOLDERS=$(echo "$DIFF_FILES" | cut -d'/' -f1 | sort -u)
          ENV_NAME=""

          for folder in $TOP_FOLDERS; do
            case "$folder" in
              dev-environment) ENV_NAME="dev" ;;
              stage-environment) ENV_NAME="stage" ;;
              prod-environment) ENV_NAME="prod" ;;
            esac
          done

          if [[ -z "$ENV_NAME" ]]; then
            echo "No environment changes detected. Exiting."
            exit 0
          fi

          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "env_folder=${ENV_NAME}-environment" >> $GITHUB_OUTPUT
          echo "backend_key=${ENV_NAME}/terraform.tfstate" >> $GITHUB_OUTPUT

          if [[ "$ENV_NAME" == "dev" ]]; then
            echo "bucket=${{ secrets.DEV_TF_STATE_BUCKET }}" >> $GITHUB_OUTPUT
            echo "table=${{ secrets.DEV_TF_LOCK_TABLE }}" >> $GITHUB_OUTPUT
          elif [[ "$ENV_NAME" == "stage" ]]; then
            echo "bucket=${{ secrets.STAGE_TF_STATE_BUCKET }}" >> $GITHUB_OUTPUT
            echo "table=${{ secrets.STAGE_TF_LOCK_TABLE }}" >> $GITHUB_OUTPUT
          elif [[ "$ENV_NAME" == "prod" ]]; then
            echo "bucket=${{ secrets.PROD_TF_STATE_BUCKET }}" >> $GITHUB_OUTPUT
            echo "table=${{ secrets.PROD_TF_LOCK_TABLE }}" >> $GITHUB_OUTPUT
          fi

      # Configure AWS credentials (personal account)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRETE_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # Check that env_folder is set
      - name: Check env_folder
        run: |
          if [[ -z "${{ steps.detect.outputs.env_folder }}" ]]; then
            echo "No environment folder detected. Exiting."
            exit 0
          fi

      # Terraform Init (multi-line with correct \ handling)
      - name: Terraform Init
        run: |
          terraform -chdir=${{ steps.detect.outputs.env_folder }} init \
            -backend-config="bucket=${{ steps.detect.outputs.bucket }}" \
            -backend-config="dynamodb_table=${{ steps.detect.outputs.table }}" \
            -backend-config="key=${{ steps.detect.outputs.backend_key }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      # Terraform Validate
      - name: Terraform Validate
        run: terraform -chdir=${{ steps.detect.outputs.env_folder }} validate

      # Terraform Plan
      - name: Terraform Plan
        run: terraform -chdir=${{ steps.detect.outputs.env_folder }} plan

      # Terraform Apply
      - name: Terraform Apply
        run: terraform -chdir=${{ steps.detect.outputs.env_folder }} apply -auto-approve
